import { autoRemoveMessage } from './autoRemoveMessage.js'
import { db } from '../../db/index.js'
import { ct } from '../../utils/createTranslate.js'

// TODO: –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—à–∏–±–∫–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º ChatGPT —Ç–æ —Å–æ–∑–¥–∞—Ç—å –æ—á–µ—Ä–µ–¥—å –∑–∞–ø—Ä–æ—Å–æ–≤ —Å–æ–∑–¥–∞–≤ 2 –¥–µ–π—Å—Ç–≤–∏—è.
//  –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –æ—á–µ—Ä–µ–¥–∏.
//  –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞—Å–∫—É –Ω–∞ –æ—á–µ—Ä–µ–¥—å

export const errorMessage = async (bot, error, msg, component) => {
  const t = await ct(msg)
   const options = {
      parse_mode: 'HTML',
      reply_to_message_id: msg.message_id
    }

  const message = `‚ö°Ô∏è\n${error.message ?? error}`
  console.log('error', error)
  let subValues = []

  await db.subscriber.findOne({
    where: {
      user_id: msg.from?.id
    }
  }).then(sub => {
    console.log('seb', sub.dataValues)
    for (let key in sub.dataValues) {
      subValues.push(`${key}: ${sub.dataValues[key]}`)
    }
    bot.sendMessage(process.env.SENTRY_GROUP, `‚ö°Ô∏è <b>${message}</b> \n\nüî∫ <b>${component || 'not found'}</b>\n\n${subValues.join('\n')}`, {parse_mode: 'HTML'})
    bot.sendMessage(msg.from.id, `‚ò†Ô∏è ${t('msg:error')}\nError: ${msg.from?.id}`, options)
  })

//   bot.sendMessage(process.env.SENTRY_GROUP, `
// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${msg.from.username} ID ${msg.from.id}\n
// `)

  // await autoRemoveMessage(message, bot, chatID, options, 10000)
}